<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://doutk.github.io</id>
    <title>Gridea</title>
    <updated>2022-09-29T13:41:38.001Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://doutk.github.io"/>
    <link rel="self" href="https://doutk.github.io/atom.xml"/>
    <subtitle>总之，向着力所能及的目标冲刺就好了！</subtitle>
    <logo>https://doutk.github.io/images/avatar.png</logo>
    <icon>https://doutk.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[git基本命令]]></title>
        <id>https://doutk.github.io/post/git-ji-ben-ming-ling/</id>
        <link href="https://doutk.github.io/post/git-ji-ben-ming-ling/">
        </link>
        <updated>2022-09-29T13:38:52.000Z</updated>
        <content type="html"><![CDATA[<p>提交暂存区 拉取到工作目录<br>
git add files //git checkout<br>
提交本地仓库 从本地仓库拉取到暂存区<br>
git commit -m //git reset<br>
提交远程仓库 拉取代码到本地仓库<br>
git push //git pull</p>
<p>克隆远程仓库<br>
git clone 仓库地址</p>
<p>1）、cd : 改变目录。</p>
<p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p>
<p>3）、pwd : 显示当前所在的目录路径。</p>
<p>4）、ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p>
<p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p>
<p>6）、rm: 删除一个文件, rm index.js 就会把index.js文件删除。</p>
<p>7）、mkdir: 新建一个目录,就是新建一个文件夹。</p>
<p>8）、rm -r : 删除一个文件夹, rm -r src 删除src目录</p>
<p>rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！<br>
9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p>
<p>10）、reset 重新初始化终端/清屏。</p>
<p>11）、clear 清屏。</p>
<p>12）、history 查看命令历史。</p>
<p>13）、help 帮助。</p>
<p>14）、exit 退出。</p>
<p>15）、#表示注释</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql基本命令]]></title>
        <id>https://doutk.github.io/post/mysql-ji-ben-ming-ling/</id>
        <link href="https://doutk.github.io/post/mysql-ji-ben-ming-ling/">
        </link>
        <updated>2022-09-29T13:36:54.000Z</updated>
        <content type="html"><![CDATA[<p>一：常见约束<br>
NOT NULL：非空，用于保证该字段的值不能为空<br>
比如姓名、学号等</p>
<p>DEFAULT：默认，用于保证该字段有默认值<br>
比如性别</p>
<p>PRIMARY KEY:主键，用于保证该字段的值具有唯一性，并且非空<br>
比如学号、员工编号</p>
<p>UNIQUE:唯一，用于保证该字段的值具有唯一性，可以为空<br>
比如座位号</p>
<p>CHECK:检查约束//!</p>
<p>FOREIGN KEY :外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联的值。<br>
比如学生表的专业编号，员工的部门编号，员工表的工种编号</p>
<p>二：数据库基本操作<br>
1：显示数据库<br>
show databases</p>
<p>2:进入数据库<br>
use 库名;//例如 use test;</p>
<p>3：显示数据库的表<br>
show tables;</p>
<p>3.5：创建数据库<br>
create database 库名 default charset utf8 collate utf8_general_ci;</p>
<p>4：显示其他库的表<br>
show tables from 库名;//例如 show tables from mysql</p>
<p>5：显示位于哪个库<br>
select database();</p>
<p>6:创建表<br>
create table stuinfo(<br>
-&gt;id int,//字段 类型<br>
-&gt;name varchar(20));</p>
<p>7修改表名<br>
alter table 旧表名 rename to 新表名;</p>
<p>8修改字段的数据类型<br>
alter table 表名 modify 字段名 数据类型;</p>
<p>9修改字段名<br>
alter table 表名 change 旧字段名 新字段名 新数据类型;</p>
<p>10添加字段<br>
alter table 表名 add 新字段名 新数据类型;</p>
<p>11删除字段<br>
alter table 表名 drop 字段名；</p>
<p>12修改字段的排列位置<br>
alter table 表名 modify 字段 数据类型 after 字段；</p>
<p>13:删除表<br>
drop table if exists 表名;</p>
<p>14:约束<br>
primary key//主键<br>
not null//非空<br>
default//默认<br>
unique//唯一</p>
<p>15:查看表中索引<br>
show index from 表名;</p>
<p>16:添加表级约束</p>
<p>create table 表名(<br>
id int,<br>
stuname varchar(20),<br>
gender char(1),<br>
seat int,<br>
age int,<br>
majorid int,</p>
<p>复制代码<br>
primary key(id),#主键<br>
unique(seat),#唯一键<br>
default(age) 18,#默认<br>
check(gender='男'or gender = '女'),#检查<br>
[constraint fk_stuinfo_major]  foreign key(majorid) references major(id)#外键<br>
);</p>
<p>17:修改表时添加约束:</p>
<p>alter table 表名 modify column 表名 类型 约束;//列级</p>
<p>alter table 表名 add 约束(字段);//表级约束</p>
<p>alter table 表名 add [constraint 外键名] foreign key(字段) references 主表(字段);//添加外键</p>
<p>18:修改表时删除约束<br>
alter table 表名 modify column 表名 类型;<br>
alter table 表名 drop 约束;<br>
alter table 表名 drop foreign key 外键名;<br>
alter table 表名 drop index 唯一键名;//show index from 表名查看</p>
<p>19:查看表的结构<br>
desc 表名; //例如 desc stuinfo;</p>
<p>20:查看表的数据<br>
select * from 表名//例如 select * from stuinfo;查询的为整表的数据字段</p>
<p>21:查询单个字段<br>
select 字段名 from 表名;</p>
<p>22:查询多个字段<br>
select 字段名，字段名，字段名 from 表名;</p>
<p>23:插入数据<br>
insert into 表名 (字段) values(值);//</p>
<p>24:修改数据<br>
update 表名 set 列名='修改数据' where name like '%';<br>
update 表名 set 列名='修改数据',列名='修改数据' where id=2;</p>
<p>25:删除数据<br>
delete from 表名 where id=1;</p>
<p>26 复合查询<br>
select * from where id=1 and price&gt;100;</p>
<p>27使用别名指定列<br>
select g_number as 商品号,g_name as 商品名称 from goods;</p>
<p>28模糊查询<br>
select * from goods where g_name like '%520%';</p>
<p>29等值连接<br>
select g_name,g_price,o_number,o_date from goods,orderdetails where orderdetails.g_ID=goods.g_number;//查询所有订单中订购的商品信息和日期。</p>
<p>30外连接<br>
左外连接，left join左边的是主表<br>
右外连接，right join右边的是主表<br>
select good.s_sids,good.s_snames,goods.g_number,goods.g_name,goods.g_price from good left outer join goods on good.s_sids=g_sids;<br>
//了解所有商品类别以及其对应的商品信息。</p>
<p>31升序、降序<br>
order by 字段 asc,字段 desc;</p>
<p>32 IN子查询<br>
select g_number ,g_name,g_sids from goods where g_number in(<br>
select g_number from goods where g_sids in(02)<br>
);//了解和02类别号为同类商品的商品号、商品名称和订单总金额;</p>
<p>32EXISTS的子查询<br>
select os_sid,os_date,os_time from orders where exists(select * from employees where u_state=os_state and os_post=u_post);<br>
//针对EMPLOYEES表中员工，在ORDERS表中查找处理过订单并送货模式为邮寄的所有订单信息。</p>
<p>33复合索引<br>
创建联合索引的语法：create index 索引名 on 表名（字段名1，字段名2）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shell变量的赋值（1.9）]]></title>
        <id>https://doutk.github.io/post/shell-bian-liang-de-fu-zhi-19/</id>
        <link href="https://doutk.github.io/post/shell-bian-liang-de-fu-zhi-19/">
        </link>
        <updated>2022-09-29T13:35:50.000Z</updated>
        <content type="html"><![CDATA[<p>1.9.2 从键盘读入赋值<br>
在Shell脚本中Shell变量可以通过从键盘读入输入的内容来赋值。命令格式为：<br>
read -p [提示信息]: [变量名]<br>
[root@tianyun~]#vim ping2.sh<br>
#!/bin/bash<br>
read -p &quot;input ip:&quot; ip<br>
ping -c2 $ip &amp;&gt;/dev/null<br>
if [ $? == 0 ];then<br>
echo &quot;host $ip is ok&quot;<br>
else<br>
echo &quot;host $ip is fall&quot;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[跨交换机基于端口VLAN的划分方法]]></title>
        <id>https://doutk.github.io/post/kua-jiao-huan-ji-ji-yu-duan-kou-vlan-de-hua-fen-fang-fa/</id>
        <link href="https://doutk.github.io/post/kua-jiao-huan-ji-ji-yu-duan-kou-vlan-de-hua-fen-fang-fa/">
        </link>
        <updated>2022-09-29T13:34:04.000Z</updated>
        <content type="html"><![CDATA[<p>1.创建4个Vlan 10 20 30 99并分配10 20 30,命令如下<br>
Switch#conf t<br>
Switch(config)#vlan 10<br>
Switch(config-vlan)#exit<br>
Switch(config)#vlan 20<br>
Switch(config-vlan)#exit<br>
Switch(config)#vlan 30<br>
Switch(config-vlan)#exit<br>
Switch(config)#vlan 99<br>
Switch(config-vlan)#exit<br>
Switch(config)#int range f0/1-9<br>
Switch(config-if-range)#swit access vlan 10<br>
Switch(config-if-range)#int range f0/10-19<br>
Switch(config-if-range)#swit access vlan 20<br>
Switch(config-if-range)#int range f0/20-24<br>
Switch(config-if-range)#swit access vlan 30<br>
Switch(config-if-range)#exit</p>
<p>2.分配端口 G0/1,命令如下<br>
Switch(config)#int g0/1<br>
Switch(config-if)#swit access vlan 99<br>
Switch(config-if)#exit</p>
<p>3.把G0/1设成trunk ,命令如下<br>
Switch(config)#int G0/1<br>
Switch(config-if)#swit mode trunk</p>
<p>4.把Vlan 99设成本征Vlan，命令如下<br>
Switch(config)#int G0/1<br>
Switch(config-if)#swit trunk native Vlan 99</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[同一台交换机基于端口VLAN的划分方法]]></title>
        <id>https://doutk.github.io/post/tong-yi-tai-jiao-huan-ji-ji-yu-duan-kou-vlan-de-hua-fen-fang-fa/</id>
        <link href="https://doutk.github.io/post/tong-yi-tai-jiao-huan-ji-ji-yu-duan-kou-vlan-de-hua-fen-fang-fa/">
        </link>
        <updated>2022-09-29T13:30:23.000Z</updated>
        <content type="html"><![CDATA[<p>1.将端口f0/1和f0/2划分为同一个VLAN，其VLAN号为10，端口f0/10划分为一个VLAN，其VLAN号为20，将f0/20划分为一个VLAN，其VLAN号划分为30：<br>
Switch#conf t<br>
Switch(config)#vlan 10<br>
Switch(config-vlan)#exit<br>
Switch(config)#vlan 20<br>
Switch(config-vlan)#exit<br>
Switch(config)#vlan 30<br>
Switch(config-vlan)#exit</p>
<p>Switch(config)#int f0/1<br>
Switch(config-if)#swit access vlan 10<br>
Switch(config-if)#int f0/2<br>
Switch(config-if)#swit access vlan 10<br>
Switch(config-if)#int f0/10<br>
Switch(config-if)#swit access vlan 20<br>
Switch(config-if)#int f0/20<br>
Switch(config-if)#swit access vlan 30</p>
<p>//返回端口<br>
Switch(config)#int f0/1<br>
Switch(config-if)#swit access vlan 1<br>
Switch(config-if)#int f0/2<br>
Switch(config-if)#swit access vlan 1<br>
Switch(config-if)#int f0/10<br>
Switch(config-if)#swit access vlan 1<br>
Switch(config-if)#int f0/20<br>
Switch(config-if)#swit access vlan 1<br>
Switch(config-if)#end</p>
<p>2.将不连续多个端口划分到到一个VLAN的情况<br>
Switch#conf t<br>
Switch(config)#vlan 10<br>
Switch(config-vlan)#exit<br>
Switch(config)#vlan 20<br>
Switch(config-vlan)#exit<br>
Switch(config)#vlan 30<br>
Switch(config-vlan)#exit</p>
<p>Switch#conf t<br>
Switch(config)#int range f0/1,f0/3,f0/5,f0/7,f0/9<br>
Switch(config-if-range)#swit access vlan 10<br>
Switch(config-if-range)#int range f0/2,f0/4,f0/6,f0/8,f0/10<br>
Switch(config-if-range)#swit access vlan 20<br>
Switch(config-if-range)#int range f0/12,f0/14,f0/16,f0/18,f0/20,f0/22<br>
Switch(config-if-range)#swit access vlan 30<br>
Switch(config-if-range)#end</p>
<p>3.将不连续和连续多个端口划分到到一个VLAN的情况<br>
Switch#conf t<br>
Switch(config)#int range f0/1-5,f0/7,f0/9<br>
Switch(config-if-range)#swit access vlan 10<br>
Switch(config-if-range)#int range f0/6,f0/8,f0/10-15<br>
Switch(config-if-range)#swit access vlan 20<br>
Switch(config-if-range)#int range f0/16,f0/18,f0/20-24<br>
Switch(config-if-range)#swit access vlan 30<br>
Switch(config-if-range)#end</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[建站初始]]></title>
        <id>https://doutk.github.io/post/jian-zhan-chu-shi/</id>
        <link href="https://doutk.github.io/post/jian-zhan-chu-shi/">
        </link>
        <updated>2022-09-29T13:22:28.000Z</updated>
        <content type="html"><![CDATA[<p>个人网站是一种有点神秘的动物，大部分隐身在互联网的丛林中，很少有人观察到。那些完全生活在 Facebook 和 Google 的美丽花园中的互联网用户，甚至可能都不知道该物种的存在。其他没有经验的用户可能会认为，个人网站已经像恐龙那样灭绝。事实是野外还存在许多标本，只有了解该物种习性的猎人才能发现它们。</p>
]]></content>
    </entry>
</feed>